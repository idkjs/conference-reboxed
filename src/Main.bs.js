// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Hub from "./aws/hub/Hub.bs.js";
import * as $$Map from "./Map.bs.js";
import * as Auth from "./aws/Auth.bs.js";
import * as Logo from "./components/Logo.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Theme from "./Theme.bs.js";
import * as React from "react";
import * as Helpers from "./utils/Helpers.bs.js";
import * as Profile from "./Profile.bs.js";
import * as Session from "./aws/Session.bs.js";
import * as Schedule from "./Schedule.bs.js";
import * as HubLogger from "./aws/hub/HubLogger.bs.js";
import * as ReactNative from "react-native";
import * as LoadingScreen from "./components/LoadingScreen.bs.js";
import * as ReactNavigation from "react-navigation";
import * as AppContainer$ReactNavigation from "reason-react-navigation/src/AppContainer.bs.js";

var tabBarStyle = {
  backgroundColor: Theme.Colors.primary
};

var tabBarOptions = {
  activeTintColor: Theme.Colors.highlight,
  inactiveTintColor: "#fafafa",
  style: tabBarStyle
};

var routes = {
  Schedule: {
    screen: Schedule.make
  },
  Profile: {
    screen: Profile.make
  },
  Map: {
    screen: $$Map.make
  }
};

var config = {
  tabBarOptions: tabBarOptions
};

var $$navigator = ReactNavigation.createBottomTabNavigator(routes, config);

$$navigator.navigationOptions = (function (params) {
    var headerTintColor = params.navigationOptions.headerTintColor;
    var routeName = Helpers.getActiveRoute(params.navigation.state).routeName;
    console.log("routeName", routeName);
    var tabBarIcon = function (param) {
      switch (routeName) {
        case "Map" :
            return Helpers.tabBarIcon(/* map */5442204);
        case "Schedule" :
            return Helpers.tabBarIcon(/* calendar */-14065986);
        default:
          return Helpers.tabBarIcon(/* user */-844262837);
      }
    };
    console.log("tabBarIcon", tabBarIcon);
    return {
            tabBarIcon: tabBarIcon(/* () */0),
            headerTintColor: headerTintColor
          };
  });

var TabNavigator = {
  tabBarStyle: tabBarStyle,
  tabBarOptions: tabBarOptions,
  routes: routes,
  config: config,
  $$navigator: $$navigator
};

var TabNavWithPropsContainer = AppContainer$ReactNavigation.Make({
      $$navigator: $$navigator
    });

function Main$TabNavWithProps(Props) {
  var match = React.useState((function () {
          return ;
        }));
  var setToken = match[1];
  var token = match[0];
  React.useEffect((function () {
          Curry._1(setToken, (function (param) {
                  return Session.getToken(/* () */0);
                }));
          return ;
        }));
  if (token !== undefined) {
    var screenProps = {
      token: token
    };
    return React.createElement(TabNavWithPropsContainer.make, {
                screenProps: screenProps
              });
  } else {
    return React.createElement(LoadingScreen.make, { });
  }
}

var TabNavWithProps = {
  make: Main$TabNavWithProps
};

function Main(Props) {
  var match = React.useState((function () {
          return true;
        }));
  var setSignedIn = match[1];
  var listener = function (payload) {
    console.log("listener_payload", payload);
    HubLogger.log(/* Info */2, "listening for auth events...");
    HubLogger.logO(/* Info */2, payload);
    var match = payload.hubEvent;
    if (match !== -1059795887) {
      if (match !== 881203586) {
        console.log("logger", payload);
        return /* () */0;
      } else {
        HubLogger.log(/* Info */2, "signIn event...");
        return HubLogger.logO(/* Info */2, payload);
      }
    } else {
      HubLogger.log(/* Info */2, "signOut event...");
      return HubLogger.logO(/* Info */2, payload);
    }
  };
  React.useEffect((function () {
          Auth.getCurrentAuthUser(/* () */0).then((function (result) {
                  if (result.tag) {
                    console.log("user not signed in", result[0]);
                  } else {
                    Curry._1(setSignedIn, (function (param) {
                            return true;
                          }));
                  }
                  return Promise.resolve(result);
                }));
          var remove = Hub.listen(/* auth */-1065951384, listener);
          return (function (param) {
                    return remove;
                  });
        }), ([]));
  var match$1 = !match[0];
  var renderLogo = match$1 ? React.createElement(Logo.make, { }) : null;
  return React.createElement(ReactNative.View, {
              style: {
                flex: 1
              },
              children: null
            }, renderLogo, React.createElement(LoadingScreen.make, { }));
}

var make = Main;

export {
  TabNavigator ,
  TabNavWithPropsContainer ,
  TabNavWithProps ,
  make ,
  
}
/* navigator Not a pure module */
