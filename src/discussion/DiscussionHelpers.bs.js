// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as UserSession from "./UserSession.bs.js";
import * as ReactNative from "react-native";
import * as Belt_SortArray from "bs-platform/lib/es6/belt_SortArray.js";
import * as Caml_primitive from "bs-platform/lib/es6/caml_primitive.js";
import * as Netinfo from "@react-native-community/netinfo";

function newComment(talkId, message, deviceId) {
  return {
          id: undefined,
          talkId: talkId,
          message: message,
          createdAt: Date.now().toString(),
          createdBy: UserSession.getName(/* () */0),
          deviceId: deviceId
        };
}

function extractMessageFrom($$event) {
  var newItem = $$event.value.data;
  console.log("extractMessageFrom_newItem: ", newItem);
  return newItem;
}

function scroller(param) {
  var scrollViewRef = React.useRef(null);
  var timeoutId = function (scrollView) {
    return setTimeout((function (param) {
                  scrollView.scrollToEnd();
                  return /* () */0;
                }), 50);
  };
  var match = scrollViewRef.current;
  if (match == null) {
    return /* () */0;
  } else {
    timeoutId(match);
    return /* () */0;
  }
}

function handleSetComments(newItem, comments, setComments) {
  var newCommentsArray = $$Array.append(/* array */[newItem], comments);
  var sortedComments = Belt_Array.reverse(Belt_SortArray.stableSortBy(newCommentsArray, (function (a1, a2) {
              return Caml_primitive.caml_string_compare(a1.createdAt, a2.createdAt);
            })));
  console.log("newCommentsArray[0]: ", Caml_array.caml_array_get(newCommentsArray, 0));
  console.log("newCommentsArray: ", newCommentsArray);
  console.log("sortedComments[0]: ", Caml_array.caml_array_get(sortedComments, 0));
  console.log("sortedComments: ", sortedComments);
  Curry._1(setComments, (function (param) {
          return sortedComments;
        }));
  return scroller(/* () */0);
}

function useSubscribed(param) {
  var match = React.useState((function () {
          return false;
        }));
  var setSubscribed = match[1];
  var appState = ReactNative.AppState.currentState;
  var match$1 = Netinfo.useNetInfo().details;
  var isConnected = match$1 !== null;
  React.useEffect((function () {
          if (isConnected) {
            Curry._1(setSubscribed, (function (param) {
                    return true;
                  }));
          } else {
            Curry._1(setSubscribed, (function (param) {
                    return false;
                  }));
          }
          return ;
        }), /* tuple */[
        appState,
        isConnected
      ]);
  return match[0];
}

export {
  newComment ,
  extractMessageFrom ,
  scroller ,
  handleSetComments ,
  useSubscribed ,
  
}
/* react Not a pure module */
