// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as API from "./aws/API.bs.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Wonka from "wonka/src/wonka.js";
import * as React from "react";
import * as Queries from "./graphql/Queries.bs.js";
import * as APITypes from "./aws/APITypes.bs.js";
import * as Mutations from "./graphql/Mutations.bs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as UserSession from "./discussion/UserSession.bs.js";
import * as ReactNative from "react-native";
import * as Subscriptions from "./graphql/Subscriptions.bs.js";
import * as Belt_SortArray from "bs-platform/lib/es6/belt_SortArray.js";
import * as Caml_primitive from "bs-platform/lib/es6/caml_primitive.js";
import * as Constants$Expo from "reason-expo/src/Constants.bs.js";
import * as DiscussionStyle from "./discussion/DiscussionStyle.bs.js";
import * as DiscussionHelpers from "./discussion/DiscussionHelpers.bs.js";
import * as DiscussionHistory from "./DiscussionHistory.bs.js";

var width = DiscussionStyle.dimensions.width;

function Discussion(Props) {
  var navigation = Props.navigation;
  var match = React.useState((function () {
          return "";
        }));
  var setMessage = match[1];
  var message = match[0];
  var match$1 = React.useState((function () {
          return /* array */[];
        }));
  var setComments = match$1[1];
  var comments = match$1[0];
  var subscribed = DiscussionHelpers.useSubscribed(/* () */0);
  var talkId = navigation.state.params.talk.id;
  React.useEffect((function () {
          var subRequest = Subscriptions.OnCreateComment.make(talkId, /* () */0);
          var graphqlOperation_query = subRequest.query;
          var graphqlOperation_variables = Caml_option.some(subRequest.variables);
          var graphqlOperation = {
            query: graphqlOperation_query,
            variables: graphqlOperation_variables
          };
          var source = API.subscribe(graphqlOperation);
          var subscription = Wonka.subscribe((function ($$event) {
                    console.log("subscription_event", $$event);
                    console.log("subscribed", subscribed);
                    if (subscribed) {
                      var __x = DiscussionHelpers.extractMessageFrom($$event);
                      return DiscussionHelpers.handleSetComments(__x, comments, setComments);
                    } else {
                      return /* () */0;
                    }
                  }))(Wonka.fromObservable(source));
          return (function (param) {
                    return Curry._1(subscription.unsubscribe, /* () */0);
                  });
        }), /* array */[subscribed]);
  React.useEffect((function () {
          var sortComments = function (comments) {
            return Belt_SortArray.stableSortBy(comments, (function (a1, a2) {
                          return Caml_primitive.caml_string_compare(a1.createdAt, a2.createdAt);
                        }));
          };
          var commentsRequest = Queries.ListCommentsByTalkIdQuery.make(talkId, /* () */0);
          var graphqlOperation_query = commentsRequest.query;
          var graphqlOperation_variables = Caml_option.some(commentsRequest.variables);
          var graphqlOperation = {
            query: graphqlOperation_query,
            variables: graphqlOperation_variables
          };
          API.query(graphqlOperation).then((function (response) {
                  var commentsResponse = Belt_Array.map(response.data.listCommentsByTalkId.items, APITypes.commentToRecord);
                  var comments = sortComments(commentsResponse);
                  return Promise.resolve(Curry._1(setComments, (function (param) {
                                    return comments;
                                  })));
                }));
          return ;
        }));
  var handleResponse = function (response) {
    console.log("createMessageHandleResponse: ", response);
    var onCreateCommentWithId = response.data.createComment;
    console.log("extractMessageFrom_newItem: ", onCreateCommentWithId);
    var onCreateCommentWithIdDeviceId = response.data.createComment.deviceId;
    console.log("onCreateCommentWithIdDeviceId: ", onCreateCommentWithIdDeviceId);
    console.log("onCreateCommentWithIdDeviceId === deviceId: ", onCreateCommentWithIdDeviceId === Constants$Expo.deviceId);
    console.log("deviceId: ", Constants$Expo.deviceId);
    var sameDeviceIds = onCreateCommentWithIdDeviceId === Constants$Expo.deviceId;
    if (sameDeviceIds) {
      return DiscussionHelpers.handleSetComments(onCreateCommentWithId, comments, setComments);
    } else {
      return /* () */0;
    }
  };
  var createMessage = function ($$event) {
    var timestamp = $$event.nativeEvent.text;
    console.log("timestamp", timestamp);
    var newComment_talkId = talkId;
    var newComment_createdAt = Date.now().toString();
    var newComment_createdBy = UserSession.getName(/* () */0);
    var newComment_deviceId = Constants$Expo.deviceId;
    var newComment = {
      id: undefined,
      talkId: newComment_talkId,
      message: message,
      createdAt: newComment_createdAt,
      createdBy: newComment_createdBy,
      deviceId: newComment_deviceId
    };
    console.log("newComment", newComment);
    var comments$1 = $$Array.append(comments, /* array */[newComment]);
    Curry._1(setComments, (function (param) {
            return comments$1;
          }));
    var mutationRequest = Mutations.CreateComment.make(newComment, /* () */0);
    var graphqlOperation_query = mutationRequest.query;
    var graphqlOperation_variables = Caml_option.some(mutationRequest.variables);
    var graphqlOperation = {
      query: graphqlOperation_query,
      variables: graphqlOperation_variables
    };
    API.mutate(graphqlOperation).then((function (response) {
              handleResponse(response);
              return Promise.resolve(/* () */0);
            })).catch((function (err) {
            return Promise.resolve((console.log("ERROR", err), /* () */0));
          }));
    Curry._1(setMessage, (function (param) {
            return "";
          }));
    return /* () */0;
  };
  return React.createElement(ReactNative.KeyboardAvoidingView, {
              keyboardVerticalOffset: 130,
              behavior: "padding",
              accessibilityViewIsModal: true,
              style: DiscussionStyle.styles.container,
              children: null
            }, React.createElement(DiscussionHistory.make, {
                  comments: comments
                }), React.createElement(ReactNative.View, {
                  children: React.createElement(ReactNative.TextInput, {
                        autoCapitalize: "none",
                        autoCorrect: false,
                        onChangeText: (function (value) {
                            return Curry._1(setMessage, (function (param) {
                                          return value;
                                        }));
                          }),
                        onSubmitEditing: createMessage,
                        placeholder: "Discuss this talk.",
                        value: message,
                        style: DiscussionStyle.styles.input
                      })
                }));
}

Discussion.navigationOptions = {
  title: "Discussion"
};

var deviceId = Constants$Expo.deviceId;

var make = Discussion;

export {
  deviceId ,
  width ,
  make ,
  
}
/* width Not a pure module */
