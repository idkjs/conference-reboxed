// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "subscription OnCreateTalk  {\nonCreateTalk  {\nid  \nname  \nspeakerName  \nspeakerBio  \ntime  \nlocation  \nsummary  \ntwitter  \ngithub  \ncomments  {\nitems  {\nid  \ntalkId  \nmessage  \ncreatedAt  \ndeviceId  \n}\n\nnextToken  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onCreateTalk");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Talk is missing");
      }
      var match$4 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Talk is missing");
      }
      var match$6 = Js_dict.get(value$3, "speakerName");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field speakerName on type Talk is missing");
      }
      var match$8 = Js_dict.get(value$3, "speakerBio");
      var tmp$4;
      if (match$8 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeString(value$7);
        tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field speakerBio on type Talk is missing");
      }
      var match$10 = Js_dict.get(value$3, "time");
      var tmp$5;
      if (match$10 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$10);
        var match$11 = Js_json.decodeNull(value$8);
        if (match$11 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$12 = Js_json.decodeString(value$8);
          tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      var match$13 = Js_dict.get(value$3, "location");
      var tmp$6;
      if (match$13 !== undefined) {
        var value$9 = Caml_option.valFromOption(match$13);
        var match$14 = Js_json.decodeNull(value$9);
        if (match$14 !== undefined) {
          tmp$6 = undefined;
        } else {
          var match$15 = Js_json.decodeString(value$9);
          tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
        }
      } else {
        tmp$6 = undefined;
      }
      var match$16 = Js_dict.get(value$3, "summary");
      var tmp$7;
      if (match$16 !== undefined) {
        var value$10 = Caml_option.valFromOption(match$16);
        var match$17 = Js_json.decodeString(value$10);
        tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
      } else {
        tmp$7 = Js_exn.raiseError("graphql_ppx: Field summary on type Talk is missing");
      }
      var match$18 = Js_dict.get(value$3, "twitter");
      var tmp$8;
      if (match$18 !== undefined) {
        var value$11 = Caml_option.valFromOption(match$18);
        var match$19 = Js_json.decodeNull(value$11);
        if (match$19 !== undefined) {
          tmp$8 = undefined;
        } else {
          var match$20 = Js_json.decodeString(value$11);
          tmp$8 = match$20 !== undefined ? match$20 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
        }
      } else {
        tmp$8 = undefined;
      }
      var match$21 = Js_dict.get(value$3, "github");
      var tmp$9;
      if (match$21 !== undefined) {
        var value$12 = Caml_option.valFromOption(match$21);
        var match$22 = Js_json.decodeNull(value$12);
        if (match$22 !== undefined) {
          tmp$9 = undefined;
        } else {
          var match$23 = Js_json.decodeString(value$12);
          tmp$9 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
        }
      } else {
        tmp$9 = undefined;
      }
      var match$24 = Js_dict.get(value$3, "comments");
      var tmp$10;
      if (match$24 !== undefined) {
        var value$13 = Caml_option.valFromOption(match$24);
        var match$25 = Js_json.decodeNull(value$13);
        if (match$25 !== undefined) {
          tmp$10 = undefined;
        } else {
          var value$14 = Js_option.getExn(Js_json.decodeObject(value$13));
          var match$26 = Js_dict.get(value$14, "items");
          var tmp$11;
          if (match$26 !== undefined) {
            var value$15 = Caml_option.valFromOption(match$26);
            var match$27 = Js_json.decodeNull(value$15);
            tmp$11 = match$27 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$15)).map((function (value) {
                      var match = Js_json.decodeNull(value);
                      if (match !== undefined) {
                        return ;
                      } else {
                        var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                        var match$1 = Js_dict.get(value$1, "id");
                        var tmp;
                        if (match$1 !== undefined) {
                          var value$2 = Caml_option.valFromOption(match$1);
                          var match$2 = Js_json.decodeString(value$2);
                          tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        } else {
                          tmp = Js_exn.raiseError("graphql_ppx: Field id on type Comment is missing");
                        }
                        var match$3 = Js_dict.get(value$1, "talkId");
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var value$3 = Caml_option.valFromOption(match$3);
                          var match$4 = Js_json.decodeNull(value$3);
                          if (match$4 !== undefined) {
                            tmp$1 = undefined;
                          } else {
                            var match$5 = Js_json.decodeString(value$3);
                            tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                          }
                        } else {
                          tmp$1 = undefined;
                        }
                        var match$6 = Js_dict.get(value$1, "message");
                        var tmp$2;
                        if (match$6 !== undefined) {
                          var value$4 = Caml_option.valFromOption(match$6);
                          var match$7 = Js_json.decodeNull(value$4);
                          if (match$7 !== undefined) {
                            tmp$2 = undefined;
                          } else {
                            var match$8 = Js_json.decodeString(value$4);
                            tmp$2 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                          }
                        } else {
                          tmp$2 = undefined;
                        }
                        var match$9 = Js_dict.get(value$1, "createdAt");
                        var tmp$3;
                        if (match$9 !== undefined) {
                          var value$5 = Caml_option.valFromOption(match$9);
                          var match$10 = Js_json.decodeNull(value$5);
                          if (match$10 !== undefined) {
                            tmp$3 = undefined;
                          } else {
                            var match$11 = Js_json.decodeString(value$5);
                            tmp$3 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                          }
                        } else {
                          tmp$3 = undefined;
                        }
                        var match$12 = Js_dict.get(value$1, "deviceId");
                        var tmp$4;
                        if (match$12 !== undefined) {
                          var value$6 = Caml_option.valFromOption(match$12);
                          var match$13 = Js_json.decodeNull(value$6);
                          if (match$13 !== undefined) {
                            tmp$4 = undefined;
                          } else {
                            var match$14 = Js_json.decodeString(value$6);
                            tmp$4 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                          }
                        } else {
                          tmp$4 = undefined;
                        }
                        return {
                                id: tmp,
                                talkId: tmp$1,
                                message: tmp$2,
                                createdAt: tmp$3,
                                deviceId: tmp$4
                              };
                      }
                    }));
          } else {
            tmp$11 = undefined;
          }
          var match$28 = Js_dict.get(value$14, "nextToken");
          var tmp$12;
          if (match$28 !== undefined) {
            var value$16 = Caml_option.valFromOption(match$28);
            var match$29 = Js_json.decodeNull(value$16);
            if (match$29 !== undefined) {
              tmp$12 = undefined;
            } else {
              var match$30 = Js_json.decodeString(value$16);
              tmp$12 = match$30 !== undefined ? match$30 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
            }
          } else {
            tmp$12 = undefined;
          }
          tmp$10 = {
            items: tmp$11,
            nextToken: tmp$12
          };
        }
      } else {
        tmp$10 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        speakerName: tmp$3,
        speakerBio: tmp$4,
        time: tmp$5,
        location: tmp$6,
        summary: tmp$7,
        twitter: tmp$8,
        github: tmp$9,
        comments: tmp$10
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onCreateTalk: tmp
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var OnCreateTalk = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "subscription OnUpdateTalk  {\nonUpdateTalk  {\nid  \nname  \nspeakerName  \nspeakerBio  \ntime  \nlocation  \nsummary  \ntwitter  \ngithub  \ncomments  {\nitems  {\nid  \ntalkId  \nmessage  \ncreatedAt  \ndeviceId  \n}\n\nnextToken  \n}\n\n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onUpdateTalk");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Talk is missing");
      }
      var match$4 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Talk is missing");
      }
      var match$6 = Js_dict.get(value$3, "speakerName");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field speakerName on type Talk is missing");
      }
      var match$8 = Js_dict.get(value$3, "speakerBio");
      var tmp$4;
      if (match$8 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeString(value$7);
        tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field speakerBio on type Talk is missing");
      }
      var match$10 = Js_dict.get(value$3, "time");
      var tmp$5;
      if (match$10 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$10);
        var match$11 = Js_json.decodeNull(value$8);
        if (match$11 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$12 = Js_json.decodeString(value$8);
          tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      var match$13 = Js_dict.get(value$3, "location");
      var tmp$6;
      if (match$13 !== undefined) {
        var value$9 = Caml_option.valFromOption(match$13);
        var match$14 = Js_json.decodeNull(value$9);
        if (match$14 !== undefined) {
          tmp$6 = undefined;
        } else {
          var match$15 = Js_json.decodeString(value$9);
          tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
        }
      } else {
        tmp$6 = undefined;
      }
      var match$16 = Js_dict.get(value$3, "summary");
      var tmp$7;
      if (match$16 !== undefined) {
        var value$10 = Caml_option.valFromOption(match$16);
        var match$17 = Js_json.decodeString(value$10);
        tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
      } else {
        tmp$7 = Js_exn.raiseError("graphql_ppx: Field summary on type Talk is missing");
      }
      var match$18 = Js_dict.get(value$3, "twitter");
      var tmp$8;
      if (match$18 !== undefined) {
        var value$11 = Caml_option.valFromOption(match$18);
        var match$19 = Js_json.decodeNull(value$11);
        if (match$19 !== undefined) {
          tmp$8 = undefined;
        } else {
          var match$20 = Js_json.decodeString(value$11);
          tmp$8 = match$20 !== undefined ? match$20 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
        }
      } else {
        tmp$8 = undefined;
      }
      var match$21 = Js_dict.get(value$3, "github");
      var tmp$9;
      if (match$21 !== undefined) {
        var value$12 = Caml_option.valFromOption(match$21);
        var match$22 = Js_json.decodeNull(value$12);
        if (match$22 !== undefined) {
          tmp$9 = undefined;
        } else {
          var match$23 = Js_json.decodeString(value$12);
          tmp$9 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
        }
      } else {
        tmp$9 = undefined;
      }
      var match$24 = Js_dict.get(value$3, "comments");
      var tmp$10;
      if (match$24 !== undefined) {
        var value$13 = Caml_option.valFromOption(match$24);
        var match$25 = Js_json.decodeNull(value$13);
        if (match$25 !== undefined) {
          tmp$10 = undefined;
        } else {
          var value$14 = Js_option.getExn(Js_json.decodeObject(value$13));
          var match$26 = Js_dict.get(value$14, "items");
          var tmp$11;
          if (match$26 !== undefined) {
            var value$15 = Caml_option.valFromOption(match$26);
            var match$27 = Js_json.decodeNull(value$15);
            tmp$11 = match$27 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$15)).map((function (value) {
                      var match = Js_json.decodeNull(value);
                      if (match !== undefined) {
                        return ;
                      } else {
                        var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                        var match$1 = Js_dict.get(value$1, "id");
                        var tmp;
                        if (match$1 !== undefined) {
                          var value$2 = Caml_option.valFromOption(match$1);
                          var match$2 = Js_json.decodeString(value$2);
                          tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        } else {
                          tmp = Js_exn.raiseError("graphql_ppx: Field id on type Comment is missing");
                        }
                        var match$3 = Js_dict.get(value$1, "talkId");
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var value$3 = Caml_option.valFromOption(match$3);
                          var match$4 = Js_json.decodeNull(value$3);
                          if (match$4 !== undefined) {
                            tmp$1 = undefined;
                          } else {
                            var match$5 = Js_json.decodeString(value$3);
                            tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                          }
                        } else {
                          tmp$1 = undefined;
                        }
                        var match$6 = Js_dict.get(value$1, "message");
                        var tmp$2;
                        if (match$6 !== undefined) {
                          var value$4 = Caml_option.valFromOption(match$6);
                          var match$7 = Js_json.decodeNull(value$4);
                          if (match$7 !== undefined) {
                            tmp$2 = undefined;
                          } else {
                            var match$8 = Js_json.decodeString(value$4);
                            tmp$2 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                          }
                        } else {
                          tmp$2 = undefined;
                        }
                        var match$9 = Js_dict.get(value$1, "createdAt");
                        var tmp$3;
                        if (match$9 !== undefined) {
                          var value$5 = Caml_option.valFromOption(match$9);
                          var match$10 = Js_json.decodeNull(value$5);
                          if (match$10 !== undefined) {
                            tmp$3 = undefined;
                          } else {
                            var match$11 = Js_json.decodeString(value$5);
                            tmp$3 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                          }
                        } else {
                          tmp$3 = undefined;
                        }
                        var match$12 = Js_dict.get(value$1, "deviceId");
                        var tmp$4;
                        if (match$12 !== undefined) {
                          var value$6 = Caml_option.valFromOption(match$12);
                          var match$13 = Js_json.decodeNull(value$6);
                          if (match$13 !== undefined) {
                            tmp$4 = undefined;
                          } else {
                            var match$14 = Js_json.decodeString(value$6);
                            tmp$4 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                          }
                        } else {
                          tmp$4 = undefined;
                        }
                        return {
                                id: tmp,
                                talkId: tmp$1,
                                message: tmp$2,
                                createdAt: tmp$3,
                                deviceId: tmp$4
                              };
                      }
                    }));
          } else {
            tmp$11 = undefined;
          }
          var match$28 = Js_dict.get(value$14, "nextToken");
          var tmp$12;
          if (match$28 !== undefined) {
            var value$16 = Caml_option.valFromOption(match$28);
            var match$29 = Js_json.decodeNull(value$16);
            if (match$29 !== undefined) {
              tmp$12 = undefined;
            } else {
              var match$30 = Js_json.decodeString(value$16);
              tmp$12 = match$30 !== undefined ? match$30 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
            }
          } else {
            tmp$12 = undefined;
          }
          tmp$10 = {
            items: tmp$11,
            nextToken: tmp$12
          };
        }
      } else {
        tmp$10 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        speakerName: tmp$3,
        speakerBio: tmp$4,
        time: tmp$5,
        location: tmp$6,
        summary: tmp$7,
        twitter: tmp$8,
        github: tmp$9,
        comments: tmp$10
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onUpdateTalk: tmp
        };
}

function make$1(param) {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function makeWithVariables$1(param) {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function makeVariables$1(param) {
  return null;
}

function definition_002$1(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var OnUpdateTalk = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var ppx_printed_query$2 = "subscription OnDeleteTalk  {\nonDeleteTalk  {\nid  \nname  \nspeakerName  \nspeakerBio  \ntime  \nlocation  \nsummary  \ntwitter  \ngithub  \ncomments  {\nitems  {\nid  \ntalkId  \nmessage  \ncreatedAt  \ndeviceId  \n}\n\nnextToken  \n}\n\n}\n\n}\n";

function parse$2(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onDeleteTalk");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Talk is missing");
      }
      var match$4 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field name on type Talk is missing");
      }
      var match$6 = Js_dict.get(value$3, "speakerName");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field speakerName on type Talk is missing");
      }
      var match$8 = Js_dict.get(value$3, "speakerBio");
      var tmp$4;
      if (match$8 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeString(value$7);
        tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field speakerBio on type Talk is missing");
      }
      var match$10 = Js_dict.get(value$3, "time");
      var tmp$5;
      if (match$10 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$10);
        var match$11 = Js_json.decodeNull(value$8);
        if (match$11 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$12 = Js_json.decodeString(value$8);
          tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      var match$13 = Js_dict.get(value$3, "location");
      var tmp$6;
      if (match$13 !== undefined) {
        var value$9 = Caml_option.valFromOption(match$13);
        var match$14 = Js_json.decodeNull(value$9);
        if (match$14 !== undefined) {
          tmp$6 = undefined;
        } else {
          var match$15 = Js_json.decodeString(value$9);
          tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
        }
      } else {
        tmp$6 = undefined;
      }
      var match$16 = Js_dict.get(value$3, "summary");
      var tmp$7;
      if (match$16 !== undefined) {
        var value$10 = Caml_option.valFromOption(match$16);
        var match$17 = Js_json.decodeString(value$10);
        tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
      } else {
        tmp$7 = Js_exn.raiseError("graphql_ppx: Field summary on type Talk is missing");
      }
      var match$18 = Js_dict.get(value$3, "twitter");
      var tmp$8;
      if (match$18 !== undefined) {
        var value$11 = Caml_option.valFromOption(match$18);
        var match$19 = Js_json.decodeNull(value$11);
        if (match$19 !== undefined) {
          tmp$8 = undefined;
        } else {
          var match$20 = Js_json.decodeString(value$11);
          tmp$8 = match$20 !== undefined ? match$20 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
        }
      } else {
        tmp$8 = undefined;
      }
      var match$21 = Js_dict.get(value$3, "github");
      var tmp$9;
      if (match$21 !== undefined) {
        var value$12 = Caml_option.valFromOption(match$21);
        var match$22 = Js_json.decodeNull(value$12);
        if (match$22 !== undefined) {
          tmp$9 = undefined;
        } else {
          var match$23 = Js_json.decodeString(value$12);
          tmp$9 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
        }
      } else {
        tmp$9 = undefined;
      }
      var match$24 = Js_dict.get(value$3, "comments");
      var tmp$10;
      if (match$24 !== undefined) {
        var value$13 = Caml_option.valFromOption(match$24);
        var match$25 = Js_json.decodeNull(value$13);
        if (match$25 !== undefined) {
          tmp$10 = undefined;
        } else {
          var value$14 = Js_option.getExn(Js_json.decodeObject(value$13));
          var match$26 = Js_dict.get(value$14, "items");
          var tmp$11;
          if (match$26 !== undefined) {
            var value$15 = Caml_option.valFromOption(match$26);
            var match$27 = Js_json.decodeNull(value$15);
            tmp$11 = match$27 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$15)).map((function (value) {
                      var match = Js_json.decodeNull(value);
                      if (match !== undefined) {
                        return ;
                      } else {
                        var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                        var match$1 = Js_dict.get(value$1, "id");
                        var tmp;
                        if (match$1 !== undefined) {
                          var value$2 = Caml_option.valFromOption(match$1);
                          var match$2 = Js_json.decodeString(value$2);
                          tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        } else {
                          tmp = Js_exn.raiseError("graphql_ppx: Field id on type Comment is missing");
                        }
                        var match$3 = Js_dict.get(value$1, "talkId");
                        var tmp$1;
                        if (match$3 !== undefined) {
                          var value$3 = Caml_option.valFromOption(match$3);
                          var match$4 = Js_json.decodeNull(value$3);
                          if (match$4 !== undefined) {
                            tmp$1 = undefined;
                          } else {
                            var match$5 = Js_json.decodeString(value$3);
                            tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                          }
                        } else {
                          tmp$1 = undefined;
                        }
                        var match$6 = Js_dict.get(value$1, "message");
                        var tmp$2;
                        if (match$6 !== undefined) {
                          var value$4 = Caml_option.valFromOption(match$6);
                          var match$7 = Js_json.decodeNull(value$4);
                          if (match$7 !== undefined) {
                            tmp$2 = undefined;
                          } else {
                            var match$8 = Js_json.decodeString(value$4);
                            tmp$2 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                          }
                        } else {
                          tmp$2 = undefined;
                        }
                        var match$9 = Js_dict.get(value$1, "createdAt");
                        var tmp$3;
                        if (match$9 !== undefined) {
                          var value$5 = Caml_option.valFromOption(match$9);
                          var match$10 = Js_json.decodeNull(value$5);
                          if (match$10 !== undefined) {
                            tmp$3 = undefined;
                          } else {
                            var match$11 = Js_json.decodeString(value$5);
                            tmp$3 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                          }
                        } else {
                          tmp$3 = undefined;
                        }
                        var match$12 = Js_dict.get(value$1, "deviceId");
                        var tmp$4;
                        if (match$12 !== undefined) {
                          var value$6 = Caml_option.valFromOption(match$12);
                          var match$13 = Js_json.decodeNull(value$6);
                          if (match$13 !== undefined) {
                            tmp$4 = undefined;
                          } else {
                            var match$14 = Js_json.decodeString(value$6);
                            tmp$4 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                          }
                        } else {
                          tmp$4 = undefined;
                        }
                        return {
                                id: tmp,
                                talkId: tmp$1,
                                message: tmp$2,
                                createdAt: tmp$3,
                                deviceId: tmp$4
                              };
                      }
                    }));
          } else {
            tmp$11 = undefined;
          }
          var match$28 = Js_dict.get(value$14, "nextToken");
          var tmp$12;
          if (match$28 !== undefined) {
            var value$16 = Caml_option.valFromOption(match$28);
            var match$29 = Js_json.decodeNull(value$16);
            if (match$29 !== undefined) {
              tmp$12 = undefined;
            } else {
              var match$30 = Js_json.decodeString(value$16);
              tmp$12 = match$30 !== undefined ? match$30 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
            }
          } else {
            tmp$12 = undefined;
          }
          tmp$10 = {
            items: tmp$11,
            nextToken: tmp$12
          };
        }
      } else {
        tmp$10 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        speakerName: tmp$3,
        speakerBio: tmp$4,
        time: tmp$5,
        location: tmp$6,
        summary: tmp$7,
        twitter: tmp$8,
        github: tmp$9,
        comments: tmp$10
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onDeleteTalk: tmp
        };
}

function make$2(param) {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function makeWithVariables$2(param) {
  return {
          query: ppx_printed_query$2,
          variables: null,
          parse: parse$2
        };
}

function makeVariables$2(param) {
  return null;
}

function definition_002$2(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$2 = /* tuple */[
  parse$2,
  ppx_printed_query$2,
  definition_002$2
];

function ret_type$2(f) {
  return { };
}

var MT_Ret$2 = { };

var OnDeleteTalk = {
  ppx_printed_query: ppx_printed_query$2,
  query: ppx_printed_query$2,
  parse: parse$2,
  make: make$2,
  makeWithVariables: makeWithVariables$2,
  makeVariables: makeVariables$2,
  definition: definition$2,
  ret_type: ret_type$2,
  MT_Ret: MT_Ret$2
};

var ppx_printed_query$3 = "subscription onCreateCommentWithId($talkId: ID!)  {\nonCreateCommentWithId(talkId: $talkId)  {\nid  \ntalkId  \ntalk  {\nid  \nname  \nspeakerName  \nspeakerBio  \ntime  \nlocation  \nsummary  \ntwitter  \ngithub  \ncomments  {\nnextToken  \n}\n\n}\n\nmessage  \ncreatedAt  \ncreatedBy  \ndeviceId  \n}\n\n}\n";

function parse$3(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onCreateCommentWithId");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Comment is missing");
      }
      var match$4 = Js_dict.get(value$3, "talkId");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeNull(value$5);
        if (match$5 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$6 = Js_json.decodeString(value$5);
          tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$7 = Js_dict.get(value$3, "talk");
      var tmp$3;
      if (match$7 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$7);
        var match$8 = Js_json.decodeNull(value$6);
        if (match$8 !== undefined) {
          tmp$3 = undefined;
        } else {
          var value$7 = Js_option.getExn(Js_json.decodeObject(value$6));
          var match$9 = Js_dict.get(value$7, "id");
          var tmp$4;
          if (match$9 !== undefined) {
            var value$8 = Caml_option.valFromOption(match$9);
            var match$10 = Js_json.decodeString(value$8);
            tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Talk is missing");
          }
          var match$11 = Js_dict.get(value$7, "name");
          var tmp$5;
          if (match$11 !== undefined) {
            var value$9 = Caml_option.valFromOption(match$11);
            var match$12 = Js_json.decodeString(value$9);
            tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
          } else {
            tmp$5 = Js_exn.raiseError("graphql_ppx: Field name on type Talk is missing");
          }
          var match$13 = Js_dict.get(value$7, "speakerName");
          var tmp$6;
          if (match$13 !== undefined) {
            var value$10 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeString(value$10);
            tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
          } else {
            tmp$6 = Js_exn.raiseError("graphql_ppx: Field speakerName on type Talk is missing");
          }
          var match$15 = Js_dict.get(value$7, "speakerBio");
          var tmp$7;
          if (match$15 !== undefined) {
            var value$11 = Caml_option.valFromOption(match$15);
            var match$16 = Js_json.decodeString(value$11);
            tmp$7 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
          } else {
            tmp$7 = Js_exn.raiseError("graphql_ppx: Field speakerBio on type Talk is missing");
          }
          var match$17 = Js_dict.get(value$7, "time");
          var tmp$8;
          if (match$17 !== undefined) {
            var value$12 = Caml_option.valFromOption(match$17);
            var match$18 = Js_json.decodeNull(value$12);
            if (match$18 !== undefined) {
              tmp$8 = undefined;
            } else {
              var match$19 = Js_json.decodeString(value$12);
              tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
            }
          } else {
            tmp$8 = undefined;
          }
          var match$20 = Js_dict.get(value$7, "location");
          var tmp$9;
          if (match$20 !== undefined) {
            var value$13 = Caml_option.valFromOption(match$20);
            var match$21 = Js_json.decodeNull(value$13);
            if (match$21 !== undefined) {
              tmp$9 = undefined;
            } else {
              var match$22 = Js_json.decodeString(value$13);
              tmp$9 = match$22 !== undefined ? match$22 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$13));
            }
          } else {
            tmp$9 = undefined;
          }
          var match$23 = Js_dict.get(value$7, "summary");
          var tmp$10;
          if (match$23 !== undefined) {
            var value$14 = Caml_option.valFromOption(match$23);
            var match$24 = Js_json.decodeString(value$14);
            tmp$10 = match$24 !== undefined ? match$24 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
          } else {
            tmp$10 = Js_exn.raiseError("graphql_ppx: Field summary on type Talk is missing");
          }
          var match$25 = Js_dict.get(value$7, "twitter");
          var tmp$11;
          if (match$25 !== undefined) {
            var value$15 = Caml_option.valFromOption(match$25);
            var match$26 = Js_json.decodeNull(value$15);
            if (match$26 !== undefined) {
              tmp$11 = undefined;
            } else {
              var match$27 = Js_json.decodeString(value$15);
              tmp$11 = match$27 !== undefined ? match$27 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$15));
            }
          } else {
            tmp$11 = undefined;
          }
          var match$28 = Js_dict.get(value$7, "github");
          var tmp$12;
          if (match$28 !== undefined) {
            var value$16 = Caml_option.valFromOption(match$28);
            var match$29 = Js_json.decodeNull(value$16);
            if (match$29 !== undefined) {
              tmp$12 = undefined;
            } else {
              var match$30 = Js_json.decodeString(value$16);
              tmp$12 = match$30 !== undefined ? match$30 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
            }
          } else {
            tmp$12 = undefined;
          }
          var match$31 = Js_dict.get(value$7, "comments");
          var tmp$13;
          if (match$31 !== undefined) {
            var value$17 = Caml_option.valFromOption(match$31);
            var match$32 = Js_json.decodeNull(value$17);
            if (match$32 !== undefined) {
              tmp$13 = undefined;
            } else {
              var value$18 = Js_option.getExn(Js_json.decodeObject(value$17));
              var match$33 = Js_dict.get(value$18, "nextToken");
              var tmp$14;
              if (match$33 !== undefined) {
                var value$19 = Caml_option.valFromOption(match$33);
                var match$34 = Js_json.decodeNull(value$19);
                if (match$34 !== undefined) {
                  tmp$14 = undefined;
                } else {
                  var match$35 = Js_json.decodeString(value$19);
                  tmp$14 = match$35 !== undefined ? match$35 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$19));
                }
              } else {
                tmp$14 = undefined;
              }
              tmp$13 = {
                nextToken: tmp$14
              };
            }
          } else {
            tmp$13 = undefined;
          }
          tmp$3 = {
            id: tmp$4,
            name: tmp$5,
            speakerName: tmp$6,
            speakerBio: tmp$7,
            time: tmp$8,
            location: tmp$9,
            summary: tmp$10,
            twitter: tmp$11,
            github: tmp$12,
            comments: tmp$13
          };
        }
      } else {
        tmp$3 = undefined;
      }
      var match$36 = Js_dict.get(value$3, "message");
      var tmp$15;
      if (match$36 !== undefined) {
        var value$20 = Caml_option.valFromOption(match$36);
        var match$37 = Js_json.decodeNull(value$20);
        if (match$37 !== undefined) {
          tmp$15 = undefined;
        } else {
          var match$38 = Js_json.decodeString(value$20);
          tmp$15 = match$38 !== undefined ? match$38 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$20));
        }
      } else {
        tmp$15 = undefined;
      }
      var match$39 = Js_dict.get(value$3, "createdAt");
      var tmp$16;
      if (match$39 !== undefined) {
        var value$21 = Caml_option.valFromOption(match$39);
        var match$40 = Js_json.decodeNull(value$21);
        if (match$40 !== undefined) {
          tmp$16 = undefined;
        } else {
          var match$41 = Js_json.decodeString(value$21);
          tmp$16 = match$41 !== undefined ? match$41 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$21));
        }
      } else {
        tmp$16 = undefined;
      }
      var match$42 = Js_dict.get(value$3, "createdBy");
      var tmp$17;
      if (match$42 !== undefined) {
        var value$22 = Caml_option.valFromOption(match$42);
        var match$43 = Js_json.decodeNull(value$22);
        if (match$43 !== undefined) {
          tmp$17 = undefined;
        } else {
          var match$44 = Js_json.decodeString(value$22);
          tmp$17 = match$44 !== undefined ? match$44 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$22));
        }
      } else {
        tmp$17 = undefined;
      }
      var match$45 = Js_dict.get(value$3, "deviceId");
      var tmp$18;
      if (match$45 !== undefined) {
        var value$23 = Caml_option.valFromOption(match$45);
        var match$46 = Js_json.decodeNull(value$23);
        if (match$46 !== undefined) {
          tmp$18 = undefined;
        } else {
          var match$47 = Js_json.decodeString(value$23);
          tmp$18 = match$47 !== undefined ? match$47 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$23));
        }
      } else {
        tmp$18 = undefined;
      }
      tmp = {
        id: tmp$1,
        talkId: tmp$2,
        talk: tmp$3,
        message: tmp$15,
        createdAt: tmp$16,
        createdBy: tmp$17,
        deviceId: tmp$18
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onCreateCommentWithId: tmp
        };
}

function make$3(talkId, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "talkId",
                    talkId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var talkId = variables.talkId;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "talkId",
                    talkId
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeVariables$3(talkId, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "talkId",
                  talkId
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$3(graphql_ppx_use_json_variables_fn, talkId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "talkId",
                      talkId
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$3 = /* tuple */[
  parse$3,
  ppx_printed_query$3,
  definition_002$3
];

function ret_type$3(f) {
  return { };
}

var MT_Ret$3 = { };

var OnCreateComment = {
  ppx_printed_query: ppx_printed_query$3,
  query: ppx_printed_query$3,
  parse: parse$3,
  make: make$3,
  makeWithVariables: makeWithVariables$3,
  makeVariables: makeVariables$3,
  definition: definition$3,
  ret_type: ret_type$3,
  MT_Ret: MT_Ret$3
};

var ppx_printed_query$4 = "subscription OnUpdateComment  {\nonUpdateComment  {\nid  \ntalkId  \ntalk  {\nid  \nname  \nspeakerName  \nspeakerBio  \ntime  \nlocation  \nsummary  \ntwitter  \ngithub  \ncomments  {\nnextToken  \n}\n\n}\n\nmessage  \ncreatedAt  \ndeviceId  \n}\n\n}\n";

function parse$4(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onUpdateComment");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Comment is missing");
      }
      var match$4 = Js_dict.get(value$3, "talkId");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeNull(value$5);
        if (match$5 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$6 = Js_json.decodeString(value$5);
          tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$7 = Js_dict.get(value$3, "talk");
      var tmp$3;
      if (match$7 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$7);
        var match$8 = Js_json.decodeNull(value$6);
        if (match$8 !== undefined) {
          tmp$3 = undefined;
        } else {
          var value$7 = Js_option.getExn(Js_json.decodeObject(value$6));
          var match$9 = Js_dict.get(value$7, "id");
          var tmp$4;
          if (match$9 !== undefined) {
            var value$8 = Caml_option.valFromOption(match$9);
            var match$10 = Js_json.decodeString(value$8);
            tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Talk is missing");
          }
          var match$11 = Js_dict.get(value$7, "name");
          var tmp$5;
          if (match$11 !== undefined) {
            var value$9 = Caml_option.valFromOption(match$11);
            var match$12 = Js_json.decodeString(value$9);
            tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
          } else {
            tmp$5 = Js_exn.raiseError("graphql_ppx: Field name on type Talk is missing");
          }
          var match$13 = Js_dict.get(value$7, "speakerName");
          var tmp$6;
          if (match$13 !== undefined) {
            var value$10 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeString(value$10);
            tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
          } else {
            tmp$6 = Js_exn.raiseError("graphql_ppx: Field speakerName on type Talk is missing");
          }
          var match$15 = Js_dict.get(value$7, "speakerBio");
          var tmp$7;
          if (match$15 !== undefined) {
            var value$11 = Caml_option.valFromOption(match$15);
            var match$16 = Js_json.decodeString(value$11);
            tmp$7 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
          } else {
            tmp$7 = Js_exn.raiseError("graphql_ppx: Field speakerBio on type Talk is missing");
          }
          var match$17 = Js_dict.get(value$7, "time");
          var tmp$8;
          if (match$17 !== undefined) {
            var value$12 = Caml_option.valFromOption(match$17);
            var match$18 = Js_json.decodeNull(value$12);
            if (match$18 !== undefined) {
              tmp$8 = undefined;
            } else {
              var match$19 = Js_json.decodeString(value$12);
              tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
            }
          } else {
            tmp$8 = undefined;
          }
          var match$20 = Js_dict.get(value$7, "location");
          var tmp$9;
          if (match$20 !== undefined) {
            var value$13 = Caml_option.valFromOption(match$20);
            var match$21 = Js_json.decodeNull(value$13);
            if (match$21 !== undefined) {
              tmp$9 = undefined;
            } else {
              var match$22 = Js_json.decodeString(value$13);
              tmp$9 = match$22 !== undefined ? match$22 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$13));
            }
          } else {
            tmp$9 = undefined;
          }
          var match$23 = Js_dict.get(value$7, "summary");
          var tmp$10;
          if (match$23 !== undefined) {
            var value$14 = Caml_option.valFromOption(match$23);
            var match$24 = Js_json.decodeString(value$14);
            tmp$10 = match$24 !== undefined ? match$24 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
          } else {
            tmp$10 = Js_exn.raiseError("graphql_ppx: Field summary on type Talk is missing");
          }
          var match$25 = Js_dict.get(value$7, "twitter");
          var tmp$11;
          if (match$25 !== undefined) {
            var value$15 = Caml_option.valFromOption(match$25);
            var match$26 = Js_json.decodeNull(value$15);
            if (match$26 !== undefined) {
              tmp$11 = undefined;
            } else {
              var match$27 = Js_json.decodeString(value$15);
              tmp$11 = match$27 !== undefined ? match$27 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$15));
            }
          } else {
            tmp$11 = undefined;
          }
          var match$28 = Js_dict.get(value$7, "github");
          var tmp$12;
          if (match$28 !== undefined) {
            var value$16 = Caml_option.valFromOption(match$28);
            var match$29 = Js_json.decodeNull(value$16);
            if (match$29 !== undefined) {
              tmp$12 = undefined;
            } else {
              var match$30 = Js_json.decodeString(value$16);
              tmp$12 = match$30 !== undefined ? match$30 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
            }
          } else {
            tmp$12 = undefined;
          }
          var match$31 = Js_dict.get(value$7, "comments");
          var tmp$13;
          if (match$31 !== undefined) {
            var value$17 = Caml_option.valFromOption(match$31);
            var match$32 = Js_json.decodeNull(value$17);
            if (match$32 !== undefined) {
              tmp$13 = undefined;
            } else {
              var value$18 = Js_option.getExn(Js_json.decodeObject(value$17));
              var match$33 = Js_dict.get(value$18, "nextToken");
              var tmp$14;
              if (match$33 !== undefined) {
                var value$19 = Caml_option.valFromOption(match$33);
                var match$34 = Js_json.decodeNull(value$19);
                if (match$34 !== undefined) {
                  tmp$14 = undefined;
                } else {
                  var match$35 = Js_json.decodeString(value$19);
                  tmp$14 = match$35 !== undefined ? match$35 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$19));
                }
              } else {
                tmp$14 = undefined;
              }
              tmp$13 = {
                nextToken: tmp$14
              };
            }
          } else {
            tmp$13 = undefined;
          }
          tmp$3 = {
            id: tmp$4,
            name: tmp$5,
            speakerName: tmp$6,
            speakerBio: tmp$7,
            time: tmp$8,
            location: tmp$9,
            summary: tmp$10,
            twitter: tmp$11,
            github: tmp$12,
            comments: tmp$13
          };
        }
      } else {
        tmp$3 = undefined;
      }
      var match$36 = Js_dict.get(value$3, "message");
      var tmp$15;
      if (match$36 !== undefined) {
        var value$20 = Caml_option.valFromOption(match$36);
        var match$37 = Js_json.decodeNull(value$20);
        if (match$37 !== undefined) {
          tmp$15 = undefined;
        } else {
          var match$38 = Js_json.decodeString(value$20);
          tmp$15 = match$38 !== undefined ? match$38 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$20));
        }
      } else {
        tmp$15 = undefined;
      }
      var match$39 = Js_dict.get(value$3, "createdAt");
      var tmp$16;
      if (match$39 !== undefined) {
        var value$21 = Caml_option.valFromOption(match$39);
        var match$40 = Js_json.decodeNull(value$21);
        if (match$40 !== undefined) {
          tmp$16 = undefined;
        } else {
          var match$41 = Js_json.decodeString(value$21);
          tmp$16 = match$41 !== undefined ? match$41 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$21));
        }
      } else {
        tmp$16 = undefined;
      }
      var match$42 = Js_dict.get(value$3, "deviceId");
      var tmp$17;
      if (match$42 !== undefined) {
        var value$22 = Caml_option.valFromOption(match$42);
        var match$43 = Js_json.decodeNull(value$22);
        if (match$43 !== undefined) {
          tmp$17 = undefined;
        } else {
          var match$44 = Js_json.decodeString(value$22);
          tmp$17 = match$44 !== undefined ? match$44 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$22));
        }
      } else {
        tmp$17 = undefined;
      }
      tmp = {
        id: tmp$1,
        talkId: tmp$2,
        talk: tmp$3,
        message: tmp$15,
        createdAt: tmp$16,
        deviceId: tmp$17
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onUpdateComment: tmp
        };
}

function make$4(param) {
  return {
          query: ppx_printed_query$4,
          variables: null,
          parse: parse$4
        };
}

function makeWithVariables$4(param) {
  return {
          query: ppx_printed_query$4,
          variables: null,
          parse: parse$4
        };
}

function makeVariables$4(param) {
  return null;
}

function definition_002$4(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$4 = /* tuple */[
  parse$4,
  ppx_printed_query$4,
  definition_002$4
];

function ret_type$4(f) {
  return { };
}

var MT_Ret$4 = { };

var OnUpdateComment = {
  ppx_printed_query: ppx_printed_query$4,
  query: ppx_printed_query$4,
  parse: parse$4,
  make: make$4,
  makeWithVariables: makeWithVariables$4,
  makeVariables: makeVariables$4,
  definition: definition$4,
  ret_type: ret_type$4,
  MT_Ret: MT_Ret$4
};

var ppx_printed_query$5 = "subscription OnDeleteComment  {\nonDeleteComment  {\nid  \ntalkId  \ntalk  {\nid  \nname  \nspeakerName  \nspeakerBio  \ntime  \nlocation  \nsummary  \ntwitter  \ngithub  \ncomments  {\nnextToken  \n}\n\n}\n\nmessage  \ncreatedAt  \ndeviceId  \n}\n\n}\n";

function parse$5(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onDeleteComment");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Comment is missing");
      }
      var match$4 = Js_dict.get(value$3, "talkId");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeNull(value$5);
        if (match$5 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$6 = Js_json.decodeString(value$5);
          tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$7 = Js_dict.get(value$3, "talk");
      var tmp$3;
      if (match$7 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$7);
        var match$8 = Js_json.decodeNull(value$6);
        if (match$8 !== undefined) {
          tmp$3 = undefined;
        } else {
          var value$7 = Js_option.getExn(Js_json.decodeObject(value$6));
          var match$9 = Js_dict.get(value$7, "id");
          var tmp$4;
          if (match$9 !== undefined) {
            var value$8 = Caml_option.valFromOption(match$9);
            var match$10 = Js_json.decodeString(value$8);
            tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type Talk is missing");
          }
          var match$11 = Js_dict.get(value$7, "name");
          var tmp$5;
          if (match$11 !== undefined) {
            var value$9 = Caml_option.valFromOption(match$11);
            var match$12 = Js_json.decodeString(value$9);
            tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
          } else {
            tmp$5 = Js_exn.raiseError("graphql_ppx: Field name on type Talk is missing");
          }
          var match$13 = Js_dict.get(value$7, "speakerName");
          var tmp$6;
          if (match$13 !== undefined) {
            var value$10 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeString(value$10);
            tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
          } else {
            tmp$6 = Js_exn.raiseError("graphql_ppx: Field speakerName on type Talk is missing");
          }
          var match$15 = Js_dict.get(value$7, "speakerBio");
          var tmp$7;
          if (match$15 !== undefined) {
            var value$11 = Caml_option.valFromOption(match$15);
            var match$16 = Js_json.decodeString(value$11);
            tmp$7 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
          } else {
            tmp$7 = Js_exn.raiseError("graphql_ppx: Field speakerBio on type Talk is missing");
          }
          var match$17 = Js_dict.get(value$7, "time");
          var tmp$8;
          if (match$17 !== undefined) {
            var value$12 = Caml_option.valFromOption(match$17);
            var match$18 = Js_json.decodeNull(value$12);
            if (match$18 !== undefined) {
              tmp$8 = undefined;
            } else {
              var match$19 = Js_json.decodeString(value$12);
              tmp$8 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
            }
          } else {
            tmp$8 = undefined;
          }
          var match$20 = Js_dict.get(value$7, "location");
          var tmp$9;
          if (match$20 !== undefined) {
            var value$13 = Caml_option.valFromOption(match$20);
            var match$21 = Js_json.decodeNull(value$13);
            if (match$21 !== undefined) {
              tmp$9 = undefined;
            } else {
              var match$22 = Js_json.decodeString(value$13);
              tmp$9 = match$22 !== undefined ? match$22 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$13));
            }
          } else {
            tmp$9 = undefined;
          }
          var match$23 = Js_dict.get(value$7, "summary");
          var tmp$10;
          if (match$23 !== undefined) {
            var value$14 = Caml_option.valFromOption(match$23);
            var match$24 = Js_json.decodeString(value$14);
            tmp$10 = match$24 !== undefined ? match$24 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
          } else {
            tmp$10 = Js_exn.raiseError("graphql_ppx: Field summary on type Talk is missing");
          }
          var match$25 = Js_dict.get(value$7, "twitter");
          var tmp$11;
          if (match$25 !== undefined) {
            var value$15 = Caml_option.valFromOption(match$25);
            var match$26 = Js_json.decodeNull(value$15);
            if (match$26 !== undefined) {
              tmp$11 = undefined;
            } else {
              var match$27 = Js_json.decodeString(value$15);
              tmp$11 = match$27 !== undefined ? match$27 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$15));
            }
          } else {
            tmp$11 = undefined;
          }
          var match$28 = Js_dict.get(value$7, "github");
          var tmp$12;
          if (match$28 !== undefined) {
            var value$16 = Caml_option.valFromOption(match$28);
            var match$29 = Js_json.decodeNull(value$16);
            if (match$29 !== undefined) {
              tmp$12 = undefined;
            } else {
              var match$30 = Js_json.decodeString(value$16);
              tmp$12 = match$30 !== undefined ? match$30 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
            }
          } else {
            tmp$12 = undefined;
          }
          var match$31 = Js_dict.get(value$7, "comments");
          var tmp$13;
          if (match$31 !== undefined) {
            var value$17 = Caml_option.valFromOption(match$31);
            var match$32 = Js_json.decodeNull(value$17);
            if (match$32 !== undefined) {
              tmp$13 = undefined;
            } else {
              var value$18 = Js_option.getExn(Js_json.decodeObject(value$17));
              var match$33 = Js_dict.get(value$18, "nextToken");
              var tmp$14;
              if (match$33 !== undefined) {
                var value$19 = Caml_option.valFromOption(match$33);
                var match$34 = Js_json.decodeNull(value$19);
                if (match$34 !== undefined) {
                  tmp$14 = undefined;
                } else {
                  var match$35 = Js_json.decodeString(value$19);
                  tmp$14 = match$35 !== undefined ? match$35 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$19));
                }
              } else {
                tmp$14 = undefined;
              }
              tmp$13 = {
                nextToken: tmp$14
              };
            }
          } else {
            tmp$13 = undefined;
          }
          tmp$3 = {
            id: tmp$4,
            name: tmp$5,
            speakerName: tmp$6,
            speakerBio: tmp$7,
            time: tmp$8,
            location: tmp$9,
            summary: tmp$10,
            twitter: tmp$11,
            github: tmp$12,
            comments: tmp$13
          };
        }
      } else {
        tmp$3 = undefined;
      }
      var match$36 = Js_dict.get(value$3, "message");
      var tmp$15;
      if (match$36 !== undefined) {
        var value$20 = Caml_option.valFromOption(match$36);
        var match$37 = Js_json.decodeNull(value$20);
        if (match$37 !== undefined) {
          tmp$15 = undefined;
        } else {
          var match$38 = Js_json.decodeString(value$20);
          tmp$15 = match$38 !== undefined ? match$38 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$20));
        }
      } else {
        tmp$15 = undefined;
      }
      var match$39 = Js_dict.get(value$3, "createdAt");
      var tmp$16;
      if (match$39 !== undefined) {
        var value$21 = Caml_option.valFromOption(match$39);
        var match$40 = Js_json.decodeNull(value$21);
        if (match$40 !== undefined) {
          tmp$16 = undefined;
        } else {
          var match$41 = Js_json.decodeString(value$21);
          tmp$16 = match$41 !== undefined ? match$41 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$21));
        }
      } else {
        tmp$16 = undefined;
      }
      var match$42 = Js_dict.get(value$3, "deviceId");
      var tmp$17;
      if (match$42 !== undefined) {
        var value$22 = Caml_option.valFromOption(match$42);
        var match$43 = Js_json.decodeNull(value$22);
        if (match$43 !== undefined) {
          tmp$17 = undefined;
        } else {
          var match$44 = Js_json.decodeString(value$22);
          tmp$17 = match$44 !== undefined ? match$44 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$22));
        }
      } else {
        tmp$17 = undefined;
      }
      tmp = {
        id: tmp$1,
        talkId: tmp$2,
        talk: tmp$3,
        message: tmp$15,
        createdAt: tmp$16,
        deviceId: tmp$17
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onDeleteComment: tmp
        };
}

function make$5(param) {
  return {
          query: ppx_printed_query$5,
          variables: null,
          parse: parse$5
        };
}

function makeWithVariables$5(param) {
  return {
          query: ppx_printed_query$5,
          variables: null,
          parse: parse$5
        };
}

function makeVariables$5(param) {
  return null;
}

function definition_002$5(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$5 = /* tuple */[
  parse$5,
  ppx_printed_query$5,
  definition_002$5
];

function ret_type$5(f) {
  return { };
}

var MT_Ret$5 = { };

var OnDeleteComment = {
  ppx_printed_query: ppx_printed_query$5,
  query: ppx_printed_query$5,
  parse: parse$5,
  make: make$5,
  makeWithVariables: makeWithVariables$5,
  makeVariables: makeVariables$5,
  definition: definition$5,
  ret_type: ret_type$5,
  MT_Ret: MT_Ret$5
};

var ppx_printed_query$6 = "subscription OnCreateReport  {\nonCreateReport  {\nid  \ncommentId  \ncomment  \ntalkTitle  \ndeviceId  \n}\n\n}\n";

function parse$6(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onCreateReport");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Report is missing");
      }
      var match$4 = Js_dict.get(value$3, "commentId");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field commentId on type Report is missing");
      }
      var match$6 = Js_dict.get(value$3, "comment");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field comment on type Report is missing");
      }
      var match$8 = Js_dict.get(value$3, "talkTitle");
      var tmp$4;
      if (match$8 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeString(value$7);
        tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field talkTitle on type Report is missing");
      }
      var match$10 = Js_dict.get(value$3, "deviceId");
      var tmp$5;
      if (match$10 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$10);
        var match$11 = Js_json.decodeNull(value$8);
        if (match$11 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$12 = Js_json.decodeString(value$8);
          tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        commentId: tmp$2,
        comment: tmp$3,
        talkTitle: tmp$4,
        deviceId: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onCreateReport: tmp
        };
}

function make$6(param) {
  return {
          query: ppx_printed_query$6,
          variables: null,
          parse: parse$6
        };
}

function makeWithVariables$6(param) {
  return {
          query: ppx_printed_query$6,
          variables: null,
          parse: parse$6
        };
}

function makeVariables$6(param) {
  return null;
}

function definition_002$6(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$6 = /* tuple */[
  parse$6,
  ppx_printed_query$6,
  definition_002$6
];

function ret_type$6(f) {
  return { };
}

var MT_Ret$6 = { };

var OnCreateReport = {
  ppx_printed_query: ppx_printed_query$6,
  query: ppx_printed_query$6,
  parse: parse$6,
  make: make$6,
  makeWithVariables: makeWithVariables$6,
  makeVariables: makeVariables$6,
  definition: definition$6,
  ret_type: ret_type$6,
  MT_Ret: MT_Ret$6
};

var ppx_printed_query$7 = "subscription OnUpdateReport  {\nonUpdateReport  {\nid  \ncommentId  \ncomment  \ntalkTitle  \ndeviceId  \n}\n\n}\n";

function parse$7(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onUpdateReport");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Report is missing");
      }
      var match$4 = Js_dict.get(value$3, "commentId");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field commentId on type Report is missing");
      }
      var match$6 = Js_dict.get(value$3, "comment");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field comment on type Report is missing");
      }
      var match$8 = Js_dict.get(value$3, "talkTitle");
      var tmp$4;
      if (match$8 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeString(value$7);
        tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field talkTitle on type Report is missing");
      }
      var match$10 = Js_dict.get(value$3, "deviceId");
      var tmp$5;
      if (match$10 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$10);
        var match$11 = Js_json.decodeNull(value$8);
        if (match$11 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$12 = Js_json.decodeString(value$8);
          tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        commentId: tmp$2,
        comment: tmp$3,
        talkTitle: tmp$4,
        deviceId: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onUpdateReport: tmp
        };
}

function make$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function makeWithVariables$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function makeVariables$7(param) {
  return null;
}

function definition_002$7(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$7 = /* tuple */[
  parse$7,
  ppx_printed_query$7,
  definition_002$7
];

function ret_type$7(f) {
  return { };
}

var MT_Ret$7 = { };

var OnUpdateReport = {
  ppx_printed_query: ppx_printed_query$7,
  query: ppx_printed_query$7,
  parse: parse$7,
  make: make$7,
  makeWithVariables: makeWithVariables$7,
  makeVariables: makeVariables$7,
  definition: definition$7,
  ret_type: ret_type$7,
  MT_Ret: MT_Ret$7
};

var ppx_printed_query$8 = "subscription OnDeleteReport  {\nonDeleteReport  {\nid  \ncommentId  \ncomment  \ntalkTitle  \ndeviceId  \n}\n\n}\n";

function parse$8(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "onDeleteReport");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeString(value$4);
        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Report is missing");
      }
      var match$4 = Js_dict.get(value$3, "commentId");
      var tmp$2;
      if (match$4 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$4);
        var match$5 = Js_json.decodeString(value$5);
        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
      } else {
        tmp$2 = Js_exn.raiseError("graphql_ppx: Field commentId on type Report is missing");
      }
      var match$6 = Js_dict.get(value$3, "comment");
      var tmp$3;
      if (match$6 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$6);
        var match$7 = Js_json.decodeString(value$6);
        tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
      } else {
        tmp$3 = Js_exn.raiseError("graphql_ppx: Field comment on type Report is missing");
      }
      var match$8 = Js_dict.get(value$3, "talkTitle");
      var tmp$4;
      if (match$8 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeString(value$7);
        tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
      } else {
        tmp$4 = Js_exn.raiseError("graphql_ppx: Field talkTitle on type Report is missing");
      }
      var match$10 = Js_dict.get(value$3, "deviceId");
      var tmp$5;
      if (match$10 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$10);
        var match$11 = Js_json.decodeNull(value$8);
        if (match$11 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$12 = Js_json.decodeString(value$8);
          tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        commentId: tmp$2,
        comment: tmp$3,
        talkTitle: tmp$4,
        deviceId: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          onDeleteReport: tmp
        };
}

function make$8(param) {
  return {
          query: ppx_printed_query$8,
          variables: null,
          parse: parse$8
        };
}

function makeWithVariables$8(param) {
  return {
          query: ppx_printed_query$8,
          variables: null,
          parse: parse$8
        };
}

function makeVariables$8(param) {
  return null;
}

function definition_002$8(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$8 = /* tuple */[
  parse$8,
  ppx_printed_query$8,
  definition_002$8
];

function ret_type$8(f) {
  return { };
}

var MT_Ret$8 = { };

var OnDeleteReport = {
  ppx_printed_query: ppx_printed_query$8,
  query: ppx_printed_query$8,
  parse: parse$8,
  make: make$8,
  makeWithVariables: makeWithVariables$8,
  makeVariables: makeVariables$8,
  definition: definition$8,
  ret_type: ret_type$8,
  MT_Ret: MT_Ret$8
};

export {
  OnCreateTalk ,
  OnUpdateTalk ,
  OnDeleteTalk ,
  OnCreateComment ,
  OnUpdateComment ,
  OnDeleteComment ,
  OnCreateReport ,
  OnUpdateReport ,
  OnDeleteReport ,
  
}
/* No side effect */
