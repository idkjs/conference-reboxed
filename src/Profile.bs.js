// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Form from "./components/profile/Form.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Theme from "./Theme.bs.js";
import * as Utils from "./utils/Utils.bs.js";
import * as React from "react";
import * as Social from "./components/profile/Social.bs.js";
import * as Helpers from "./utils/Helpers.bs.js";
import * as Session from "./aws/Session.bs.js";
import * as BaseHeader from "./BaseHeader.bs.js";
import * as AwsAmplify from "aws-amplify";
import * as ProfileStyle from "./components/profile/ProfileStyle.bs.js";
import * as ReactNative from "react-native";
import * as FontAwesome from "@expo/vector-icons";

function Profile(Props) {
  var navigation = Props.navigation;
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            return {
                    username: state.username,
                    email: state.email,
                    twitter: state.twitter,
                    github: state.github,
                    isEditing: !state.isEditing
                  };
          } else {
            switch (action.tag | 0) {
              case /* OnChange */0 :
                  var value = action[1];
                  switch (action[0]) {
                    case "email" :
                        return {
                                username: state.username,
                                email: value,
                                twitter: state.twitter,
                                github: state.github,
                                isEditing: state.isEditing
                              };
                    case "twitter" :
                        return {
                                username: state.username,
                                email: state.email,
                                twitter: value,
                                github: state.github,
                                isEditing: state.isEditing
                              };
                    default:
                      return state;
                  }
              case /* SetUsername */1 :
                  return {
                          username: action[0],
                          email: state.email,
                          twitter: state.twitter,
                          github: state.github,
                          isEditing: state.isEditing
                        };
              case /* SetEmail */2 :
                  return {
                          username: state.username,
                          email: action[0],
                          twitter: state.twitter,
                          github: state.github,
                          isEditing: state.isEditing
                        };
              
            }
          }
        }), {
        username: "",
        email: "",
        twitter: "_idkjs",
        github: "idkjs",
        isEditing: false
      });
  var dispatch = match[1];
  var state = match[0];
  var handleOnChange = function (key, value) {
    return Curry._1(dispatch, /* OnChange */Block.__(0, [
                  key,
                  value
                ]));
  };
  React.useEffect((function () {
          Curry._1(dispatch, /* SetEmail */Block.__(2, [Session.getEmail(/* () */0)]));
          Curry._1(dispatch, /* SetUsername */Block.__(1, [Session.getUser(/* () */0)]));
          return ;
        }), ([]));
  var match$1 = state.isEditing;
  var buttonText = match$1 ? "Save" : "Edit Profile";
  var match$2 = !state.isEditing;
  return React.createElement(ReactNative.View, {
              style: ProfileStyle.styles.container,
              children: null
            }, React.createElement(BaseHeader.make, { }), React.createElement(ReactNative.View, {
                  style: ProfileStyle.styles.profileContainer,
                  children: null
                }, React.createElement(ReactNative.Text, {
                      style: ProfileStyle.styles.username,
                      children: state.username
                    }), React.createElement(ReactNative.Text, {
                      style: ProfileStyle.styles.email,
                      children: state.email
                    }), match$2 ? React.createElement(Social.make, {
                        github: state.github,
                        twitter: state.twitter
                      }) : React.createElement(Form.make, {
                        onChange: handleOnChange,
                        twitter: state.twitter,
                        github: state.github
                      }), React.createElement(ReactNative.View, {
                      style: ProfileStyle.styles.buttonContainer,
                      children: null
                    }, React.createElement(ReactNative.TouchableHighlight, {
                          underlayColor: "transparent",
                          onPress: (function (param) {
                              return Curry._1(dispatch, /* ToggleForm */0);
                            }),
                          children: React.createElement(ReactNative.View, {
                                style: ProfileStyle.styles.button,
                                children: React.createElement(ReactNative.Text, {
                                      style: ProfileStyle.styles.buttonText,
                                      children: buttonText
                                    })
                              })
                        }), React.createElement(ReactNative.TouchableHighlight, {
                          underlayColor: "transparent",
                          onPress: (function (param) {
                              var navigation$1 = navigation;
                              AwsAmplify.Auth.signOut();
                              Utils.UserSession.clearToken(/* () */0);
                              navigation$1.navigate("AuthLoading");
                              return /* () */0;
                            }),
                          children: React.createElement(ReactNative.View, {
                                style: ProfileStyle.styles.button,
                                children: React.createElement(ReactNative.Text, {
                                      style: ProfileStyle.styles.buttonText,
                                      children: "Sign out"
                                    })
                              })
                        }))));
}

function Profile$MapIcon(Props) {
  return React.createElement(FontAwesome.FontAwesome, {
              name: "user",
              size: 20,
              color: Theme.Colors.highlight
            });
}

var MapIcon = {
  make: Profile$MapIcon
};

var tabBarIcon = React.createElement(Profile$MapIcon, { });

Profile.navigationOptions = {
  title: "Profile",
  tabBarIcon: Helpers.tabBarIcon(/* user */-844262837)
};

var make = Profile;

export {
  make ,
  MapIcon ,
  tabBarIcon ,
  
}
/* tabBarIcon Not a pure module */
